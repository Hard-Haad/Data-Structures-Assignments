// Day6(Queue).cpp : Defines the entry point for the console application.
//

#include<iostream>
using namespace std;


class Node
{
public:
	Node()
	{
		data = 0;
		next = NULL;
	}
	Node(int d)
	{
		data = d;
		next = NULL;
	}
	void setData(int d)
	{
		data = d;

	}
	int getData()
	{
		return data;
	}
	void setNext(Node* n)
	{
		next = n;
	}
	Node* getNext()
	{
		return next;
	}
	void display()
	{
		std::cout << data << "  ";
	}
private:
	int data;
	Node * next;
};
class Queue
{
private: Node *front, *rear;
		 int size;

public:
		Queue() { front = rear = NULL;
		size = 0;
		}
		void enqueue(int d) {
			Node *temp = new Node(d);
			//if (front == NULL&&rear == NULL)
			if(this->getsize()==0)
            {
				front = rear = temp;
			}
			else
			{
			    temp->setNext(front);
				rear->setNext(temp);
				rear = temp;

			}
			size++;
		}
		int getsize( )
		{
		    return size;
		}
		void gettopelement()
		{
			Node *temp = front;
			temp->getData();
			temp->display();
		}
		void search(int d)
		{
			int result = 0;
			Node *temp = front;
			while (this->getsize()!=0)
			{
				if (temp->getData() == d)
				{
					result = temp->getData();
				}
				temp = temp->getNext();
			}
			cout << result;
		}
		void dequeue()
		{
			if (this->getsize()!=0)
			{
				Node *temp = front;
				if (front->getNext()==rear)
				{
					rear->setNext(NULL);
					front->setNext(NULL);
					delete temp;
					cout<<"queue is empty ";

                }
			    front = front->getNext();
			    rear->setNext(front);
				temp = NULL;
				delete temp;
				size--;
			}
			else
				std::cout << "queue is empty";
		}

		void display()
		{
			Node *temp = front;
			int i=0;
			while (i!=this->getsize())
			{
				temp->display();
				temp = temp->getNext();
				i++;
			}
			if(front==NULL&&rear==NULL)
			{
				std::cout << "Queue is empty";
			}
		}
		void reardisplay()
		{
			Node *temp = rear;
			int i=0;
			while (i!=this->getsize())
			{
				temp->display();
				temp = temp->getNext();
				i++;
			}
			if(rear==NULL)
			{
				std::cout << "Queue is empty";
			}
		}
		void circular()
		{
			this->enqueue(front->getData());
			this->dequeue();
		}
};
int main()
{

	Queue q;

	q.enqueue(11);
	q.enqueue(44);
	q.enqueue(55);
	q.display();
	cout<<endl;
	q.reardisplay();
	cout<<endl;


	q.dequeue();
    q.display();
	cout<<endl;
	q.reardisplay();
	cout<<endl;


    q.dequeue();
    q.dequeue();
    cout<<endl;


    q.enqueue(77);
    q.display();





//	system("pause");
	return 0;
}




