#include <iostream>

using namespace std;
template<class MyNode>
class Node
{
public:
	Node()
	{
		data = 0;
		next = NULL;
	}
	Node(MyNode d)
	{
		data = d;
		next = NULL;
	}
	void setNext(Node<MyNode> *n)
	{
		next = n;
	}
	void setData(MyNode n)
	{
		data = n;
	}
	MyNode getData()
	{
		return data;
	}
	Node<MyNode> * getNext()
	{
		return next;
	}
	void display()
	{
		//data.display();
		cout << data << " ";
	}
private:
	MyNode data;
	Node *next;
};

 template<class MyQueue>
class Queue{
public:
	Queue()
	{
		front = NULL;
		rear = NULL;
		size = 0;
	}
	bool isEmpty()
	{
		return (rear == NULL && front==NULL);
	}

	void enquee(MyQueue d)
	{
		Node<MyQueue>* n = new Node<MyQueue>(d);
		if (isEmpty())
		{
			front = n;
			rear = n;
		}
		else
		{
			rear->setNext(n);
			rear = n;
		}
		size++;
	}

	void dequee()
			{
				if (!isEmpty())
				{
					Node<MyQueue> * temp = front;
					front = front->getNext();
					temp->setNext(NULL);

					if (temp == rear)
						rear->setNext(NULL);
						delete temp;
						temp = NULL;
						size--;


				}
				else
				{
					cout << "Queue -- Already Empty !!!!" << endl;
				}

			}

	void display()
	{
		Node<MyQueue> * temp = front;
		while (temp != NULL)
		{
			temp->display();
			temp = temp->getNext();
		}
	}
private:
	Node<MyQueue> * front;
	Node <MyQueue>* rear;
	int size;
};
template<class Mystack>
class Stack
{
public:
	Stack()
	{
		top = NULL;
		head = NULL;
		size = 0;
	}
	bool isEmpty()
	{
		return (top == NULL&&head==NULL);
	}
	bool check()
	{
		if (top == NULL)
			return true;
		else
			return false;
	}
	Node<Mystack> *gettop()
	{
		return this->top;
	}
	void push(Mystack d)
	{
		Node<Mystack> * n = new Node<Mystack>(d);
		if (isEmpty())
		{
			top = n;
			head = n;
		}
		else
		{
			n->setNext(top);
			top = n;
		}
		size++;
	}
	int pop()
	{
		if (!isEmpty())
		{
			Node<Mystack> * temp = top;
			top = top->getNext();
			int t = temp->getData();

			temp->setNext(NULL);
			delete temp;
			temp = NULL;
			return t;
		}
		else
		{
			cout << "Stack -- Already Empty !!!!" << endl;
			return 0;
		}
		size--;
	}
	void clone(Stack<Mystack> &s)
	{
		Stack t,d;

		int c = s.getsize();
		int b = 0;
		int k = 0;
		int a = 0;
		int x = this->getsize();
		while (x!=a)
		{
			d.push(this->pop());
			a++;
		}
		while (b!= c)
		{
			t.push(s.pop());
			b++;
		}
		while (k != c)
		{
			int v = t.pop();
			this->push(v);
			s.push(v);
			k++;
		}
		//this->display();
		//v.clone(t);
		//return t;
	}
	void display()
	{
		Node<Mystack> * temp = top;
		while (temp != NULL)
		{
			temp->display();
			temp = temp->getNext();
		}
	}
	int getsize()
	{
		return size;
	}
private:
	Node<Mystack> * top;
	Node<Mystack> * head;
	int size;
};


int main()
{
    Queue<string> q;
    q.enquee("hello");
    q.display();
    cout<<endl;
    Queue<double> u;
    u.enquee(1.3);
    u.display();
    cout<<endl;

    Stack<string> s;
    s.push("check");
    s.display();
    cout<<endl;

    Stack<float> t;
    t.push(0.023);
    t.display();
  //  cout << "Hello world!" << endl;
    return 0;
}
